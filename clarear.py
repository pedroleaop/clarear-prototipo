import streamlit as st
import random
import time
import os
# import google.generativeai as genai # COMENTADO: N√£o precisamos do Gemini API por enquanto
from gtts import gTTS 
import io 
import pandas as pd
import base64 

# --- Configura√ß√µes Iniciais do Aplicativo ---
st.set_page_config(
    page_title="ClareAR: Reabilita√ß√£o Cognitiva Personalizada",
    page_icon="üß†",
    layout="centered"
)

# --- URL da Imagem do Cabe√ßalho ---
HEADER_IMAGE_URL = "https://iili.io/F3E96dP.png"

# --- CSS para Estilo Pastel (Copiar do inicial.py para consist√™ncia) ---
# Este bloco de estilo deve ser ID√äNTICO ao do inicial.py.

st.markdown(
    """
    <style>
    /* Cores Past√©is (Azul e Laranja) */
    :root {
        --pastel-blue-light: #D4EEF2; /* Fundo geral: Azul bem clarinho */
        --pastel-blue-medium: #A2D9EE; /* Bal√µes do ClareAR / Destaques: Azul um pouco mais forte */
        --pastel-orange-light: #FFECB3; /* Laranja suave */
        --pastel-orange-medium: #FFB74D; /* Bot√µes / Acentos: Laranja um pouco mais forte */
        --pastel-gray-light: #F0F0F0; /* Fundo dos bal√µes do usu√°rio: Cinza claro */
        --text-color-dark: #333333; /* Cor do texto principal (quase preto) */
        --text-color-light: #555555; /* Cor do texto secund√°rio / placeholder */
        --sidebar-bg: #E3F2FD; /* Fundo da sidebar: Azul mais clarinho que o fundo geral */
    }

    /* Fundo da P√°gina Principal */
    .stApp {
        background-color: var(--pastel-blue-light);
        color: var(--text-color-dark);
    }

    /* Estilo dos Bal√µes de Conversa */
    .stChatMessage {
        background-color: transparent; 
    }
    .stChatMessage [data-testid="stChatMessageContent"] {
        border-radius: 15px;
        padding: 10px 15px;
        margin-bottom: 10px;
        font-size: 16px;
        line-height: 1.5;
        box-shadow: 2px 2px 5px rgba(0,0,0,0.1); 
        color: var(--text-color-dark); /* Texto dos bal√µes em preto suave */
    }

    /* Mensagens do ClareAR (Role "ClareAR") */
    .stChatMessage [data-testid="stChatMessageContent"]:first-child {
        background-color: var(--pastel-blue-medium); /* Azul suave para o bot */
        border-bottom-left-radius: 5px; 
    }

    /* Mensagens do Usu√°rio (Role "user") */
    .stChatMessage [data-testid="stChatMessageContent"]:last-child {
        background-color: var(--pastel-gray-light); /* Cinza claro para o usu√°rio */
        color: var(--text-color-dark); /* Letra preta para o usu√°rio */
        font-weight: bold; /* Negrito para mensagens do usu√°rio */
        border-bottom-right-radius: 5px; 
    }
    
    /* Input de Chat */
    [data-testid="stChatInput"] {
        background-color: white; 
        border-radius: 20px;
        padding: 5px 10px;
        box-shadow: 0px 0px 8px rgba(0,0,0,0.15);
    }
    [data-testid="stChatInput"] input {
        color: var(--text-color-dark); /* Texto digitado em preto suave */
        font-weight: bold; /* Negrito para o que o usu√°rio digita */
    }
    [data-testid="stChatInput"] button {
        background-color: var(--pastel-orange-medium); 
        color: white;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        font-size: 20px;
        border: none;
    }
    [data-testid="stChatInput"] button:hover {
        background-color: #FF8A65; 
    }

    /* Sidebar */
    .stSidebar {
        background-color: var(--sidebar-bg);
        color: var(--text-color-dark);
        padding: 20px;
        border-right: 1px solid rgba(0,0,0,0.05);
    }
    .stSidebar h1, .stSidebar h2, .stSidebar h3, .stSidebar h4, .stSidebar h6 { 
        color: var(--text-color-dark);
    }
    .stSidebar .stDataFrame {
        background-color: rgba(255,255,255,0.7);
        border-radius: 10px;
        color: var(--text-color-dark);
    }
    .stSidebar .stDataFrame .header {
        background-color: var(--pastel-blue-medium); 
        color: white;
    }
    .stSidebar .stDataFrame td {
        color: var(--text-color-dark);
    }

    /* Cores das barras de progresso (hack de CSS para a div interna) */
    .stProgress > div > div > div > div[data-testid^="stProgressAnimatedBackground"] {
        background-color: transparent !important; 
    }

    /* Cores da barra de progresso personalizada */
    .stProgress[data-testid^="stProgress"] > div > div > div > div {
        background-color: #eee; 
    }

    /* Centralizar imagem do cabe√ßalho */
    .stImage {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-left: auto;
        margin-right: auto;
        padding-top: 20px; 
        padding-bottom: 20px; 
    }

    /* Estilo para o bot√£o de √°udio personalizado */
    .audio-button-container {
        text-align: right; 
        margin-top: 5px;
    }
    .audio-button {
        background-color: var(--pastel-orange-medium);
        color: white;
        border: none;
        border-radius: 50%;
        width: 30px;
        height: 30px;
        font-size: 16px;
        cursor: pointer;
        display: inline-flex; 
        justify-content: center;
        align-items: center;
        box-shadow: 1px 1px 3px rgba(0,0,0,0.1);
    }
    .audio-button:hover {
        background-color: #FF8A65;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# --- Configura√ß√£o da API do Gemini (COMENTADO PARA DESATIVAR) ---
# api_key = os.getenv("GOOGLE_API_KEY")
# if not api_key:
#     st.error("Chave de API do Google Gemini n√£o encontrada! (INTEGRA√á√ÉO DA IA DESATIVADA TEMPORARIAMENTE)")
#     st.stop() 
# genai.configure(api_key=api_key)
# model = genai.GenerativeModel('gemini-1.5-flash-latest') 

# --- Inicializa√ß√£o do Estado da Sess√£o (Crucial para Streamlit!) ---
# A p√°gina clarear.py (dashboard) s√≥ √© acessada se o login_user_name j√° estiver definido.
# Se n√£o estiver, redireciona de volta para a p√°gina inicial (inicial.py).
if "logged_in_user_name" not in st.session_state or not st.session_state.logged_in_user_name:
    st.warning("Por favor, fa√ßa o login na p√°gina inicial para acessar o dashboard.")
    if st.button("Ir para P√°gina Inicial"):
        st.session_state.go_to_dashboard = False # Sinaliza para inicial.py que deve ser a pr√≥xima
        st.rerun() # For√ßa o rerun para inicial.py
    st.stop() # Interrompe a execu√ß√£o desta p√°gina se n√£o estiver logado

# Se chegou at√© aqui, o usu√°rio est√° logado.
# Inicializa user_data APENAS SE AINDA N√ÉO FOI INICIALIZADO para esta sess√£o.
if "user_data" not in st.session_state:
    st.session_state.user_data = {
        "nome": st.session_state.logged_in_user_name, # Usa o nome do login
        "idade": "",
        "dificuldades": [], 
        "current_page": "main_dashboard", # Define a p√°gina atual como dashboard
        "current_stage": "ask_age", # Come√ßa o fluxo do chat a partir da idade
        "active_exercise": None,     
        "exercise_data": {},         
        "performance_history": {}    
    }
# Mantenha esta checagem para pending_exercise_area separada da inicializa√ß√£o principal
if "pending_exercise_area" not in st.session_state:
    st.session_state.pending_exercise_area = None


# --- Fun√ß√µes de √Åudio ---
def play_text_as_audio_button(text_to_speak, message_id):
    """
    Converte texto em fala e gera um bot√£o de play.
    Associa o √°udio a um ID √∫nico para reprodu√ß√£o via JavaScript.
    """
    try:
        tts = gTTS(text=text_to_speak, lang='pt', slow=False) 
        fp = io.BytesIO() 
        tts.write_to_fp(fp)
        fp.seek(0) 
        
        audio_data_base64 = base64.b64encode(fp.read()).decode('utf-8')
        audio_data_url = f"data:audio/mp3;base64,{audio_data_base64}"

        st.markdown(
            f"""
            <div class="audio-button-container">
                <button class="audio-button" onclick="document.getElementById('audio_player_{message_id}').play()">
                    ‚ñ∂Ô∏è
                </button>
            </div>
            <audio id="audio_player_{message_id}" src="{audio_data_url}" style="display:none;"></audio>
            """,
            unsafe_allow_html=True
        )
    except Exception as e:
        print(f"Erro ao gerar/reproduzir √°udio para bot√£o: {e}. Texto: '{text_to_speak}'")
        st.error(f"Erro ao gerar √°udio para esta mensagem. Por favor, leia o texto.") 

def send_message_to_clarear(message_content, role="ClareAR", with_audio_button=True):
    """
    Adiciona uma mensagem ao hist√≥rico, exibe-a.
    Se for do ClareAR e with_audio_button for True, adiciona um bot√£o de √°udio.
    """
    with st.chat_message(role):
        st.markdown(message_content)
        if role == "ClareAR" and with_audio_button:
            message_id = hash(message_content + str(time.time())) 
            play_text_as_audio_button(message_content, message_id)
            time.sleep(0.1) 

    st.session_state.messages.append({"role": role, "content": message_content})
    

# --- Fun√ß√µes de Simula√ß√£o de IA (para testes sem API) ---
def generate_simulated_exercise(difficulty_area):
    """
    Simula a gera√ß√£o de um exerc√≠cio por IA, sem chamar a API.
    Retorna exerc√≠cios fixos para fins de demonstra√ß√£o.
    """
    exercises_by_domain = {
        "mem√≥ria": [
            {"name": "Sequ√™ncia de Palavras Simples", "instructions": "Memorize a sequ√™ncia de palavras.", "content": "Sol, C√©u, Flor, Rio", "domain": "mem√≥ria", "expected_answer": "sol, c√©u, flor, rio"},
            {"name": "Lembre-se da Lista de Compras", "instructions": "Memorize a lista e depois digite-a.", "content": "P√£o, Leite, Ovos, Caf√©, Frutas", "domain": "mem√≥ria", "expected_answer": "p√£o, leite, ovos, caf√©, frutas"},
        ],
        "aten√ß√£o": [
            {"name": "Contagem de Vogais", "instructions": "Quantas vogais (a, e, i, o, u) existem na frase a seguir?", "content": "A √°guia voa alto sobre a montanha.", "domain": "aten√ß√£o", "expected_answer": "12"},
            {"name": "Encontre o N√∫mero Faltante", "instructions": "Qual n√∫mero est√° faltando na sequ√™ncia: 1, 2, 3, __, 5, 6?", "content": "1, 2, 3, 4, 5, 6", "domain": "aten√ß√£o", "expected_answer": "4"}, 
        ],
        "racioc√≠nio": [
            {"name": "Charada B√°sica", "instructions": "O que √©, o que √©: Anda e n√£o tem p√©s, voa e n√£o tem asas?", "content": "O que √©, o que √©: Anda e n√£o tem p√©s, voa e n√£o tem asas?", "domain": "racioc√≠nio", "expected_answer": "fuma√ßa"},
            {"name": "Padr√£o Num√©rico Simples", "instructions": "Continue a sequ√™ncia l√≥gica: 3, 6, 9, 12, __?", "content": "3, 6, 9, 12", "domain": "racioc√≠nio", "expected_answer": "15"}, 
        ],
        "orienta√ß√£o": [
            {"name": "Orienta√ß√£o Temporal", "instructions": "Qual √© o dia da semana hoje?", "content": "Qual √© o dia da semana hoje?", "domain": "orienta√ß√£o", "expected_answer": time.strftime("%A").lower()}, # Resposta din√¢mica
            {"name": "Orienta√ß√£o Espacial", "instructions": "Em que cidade voc√™ est√° agora?", "content": "Em que cidade voc√™ est√° agora?", "domain": "orienta√ß√£o", "expected_answer": "recife"} 
        ]
    }
    return random.choice(exercises_by_domain.get(difficulty_area.lower(), exercises_by_domain["mem√≥ria"])) 

def generate_simulated_feedback(performance, exercise_name, user_response, expected_answer):
    """
    Simula feedback, sem chamar a API.
    """
    if performance == "correct":
        return f"Parab√©ns! Voc√™ acertou o exerc√≠cio '{exercise_name}'. Excelente desempenho! Sua resposta '{user_response}' est√° correta."
    else:
        return f"Tudo bem, √†s vezes erramos! Voc√™ respondeu '{user_response}', mas a resposta esperada era '{expected_answer}'. A pr√°tica leva √† perfei√ß√£o. Que tal tentar outro?"

def generate_gemini_exercise(difficulty_area, user_age, user_difficulties):
    return generate_simulated_exercise(difficulty_area) 

def generate_gemini_feedback(performance, exercise_name, user_response, expected_answer):
    return generate_simulated_feedback(performance, exercise_name, user_response, expected_answer) 


def update_performance_history(exercise_name, domain, result):
    """Atualiza o hist√≥rico de desempenho do usu√°rio."""
    if domain not in st.session_state.user_data["performance_history"]:
        st.session_state.user_data["performance_history"][domain] = {"attempts": 0, "correct": 0}
    
    st.session_state.user_data["performance_history"][domain]["attempts"] += 1
    if result == "correct":
        st.session_state.user_data["performance_history"][domain]["correct"] += 1
    
    print(f"Performance history updated: {st.session_state.user_data['performance_history']}")


# --- Nova Fun√ß√£o para Exibir o Painel de Progresso ---
def display_progress_panel():
    st.sidebar.markdown("---")
    st.sidebar.header("üìà Seu Progresso no ClareAR")

    print(f"Displaying progress. Current history: {st.session_state.user_data.get('performance_history', 'Not initialized')}")

    if not st.session_state.user_data.get("performance_history"): 
        st.sidebar.info("Comece a resolver exerc√≠cios para ver seu progresso aqui!")
    else:
        progress_data = []
        for domain, data in st.session_state.user_data["performance_history"].items():
            if data["attempts"] > 0:
                accuracy = (data["correct"] / data["attempts"]) * 100
                progress_data.append({"Dom√≠nio": domain.capitalize(), "Acerto (%)": accuracy, "Tentativas": data["attempts"]})
        
        if progress_data:
            df_progress = pd.DataFrame(progress_data)
            
            st.sidebar.markdown("#### Acertos por Dom√≠nio")
            st.sidebar.dataframe(df_progress.set_index("Dom√≠nio"))

            st.sidebar.markdown("#### Visualiza√ß√£o da Performance")
            for index, row in df_progress.iterrows():
                domain = row["Dom√≠nio"]
                accuracy = row["Acerto (%)"]
                attempts = row["Tentativas"]

                color_bg = "#eee" 
                color_fill = ""
                if accuracy >= 70:
                    color_fill = "#8BC34A" # Verde pastel
                elif accuracy >= 40:
                    color_fill = "#FFC107" # Laranja/Amarelo pastel
                else:
                    color_fill = "#FF5722" # Vermelho/Laranja mais forte pastel
                
                st.sidebar.markdown(
                    f"**{domain}**: {accuracy:.1f}% de acerto em {attempts} tentativas"
                )
                
                st.sidebar.markdown(f"""
                <div style="width: 100%; background-color: {color_bg}; border-radius: 5px;">
                    <div style="width: {accuracy}%; background-color: {color_fill}; height: 10px; border-radius: 5px;"></div>
                </div>
                """, unsafe_allow_html=True)
                st.sidebar.write("\n") 

        st.sidebar.markdown("---")
        st.sidebar.success("Continue treinando para melhorar ainda mais!")
    
    st.sidebar.markdown("---")


# --- L√≥gica Principal do Aplicativo ---

# Exibir a imagem do cabe√ßalho com largura menor e CENTRALIZADA
with st.container():
    st.markdown(
        f"""
        <style>
            .header-image-container {{
                display: flex;
                justify-content: center; 
                padding-top: 20px; 
                padding-bottom: 20px; 
            }}
            .header-image {{
                max-width: 50% !important; /* For√ßa a largura m√°xima para 50% do container */
                height: auto; 
                display: block; 
            }}
        </style>
        <div class="header-image-container">
            <img src="{HEADER_IMAGE_URL}" class="header-image">
        </div>
        """, unsafe_allow_html=True
    )

# Este bloco verifica se o usu√°rio est√° logado para exibir o dashboard.
# Ele substitui o antigo "if current_page == main_dashboard"
if "logged_in_user_name" not in st.session_state or not st.session_state.logged_in_user_name:
    st.warning("Por favor, fa√ßa o login na p√°gina inicial para acessar o dashboard.")
    if st.button("Ir para P√°gina Inicial"):
        # st.session_state.go_to_dashboard = False (j√° manipulado pela estrutura multi-page)
        st.stop() # Interrompe a execu√ß√£o aqui. O Streamlit vai para a home automaticamente.
    st.stop() # Interrompe a execu√ß√£o desta p√°gina se n√£o estiver logado.

# Se chegou at√© aqui, o usu√°rio est√° logado.
# Inicializa user_data APENAS SE AINDA N√ÉO FOI INICIALIZADO para esta sess√£o.
# Isso garante que o nome do usu√°rio vindo da inicial.py seja usado.
if "user_data" not in st.session_state:
    st.session_state.user_data = {
        "nome": st.session_state.logged_in_user_name, # Usa o nome do login
        "idade": "",
        "dificuldades": [], 
        "current_stage": "ask_age", # Come√ßa o fluxo do chat a partir da idade
        "active_exercise": None,     
        "exercise_data": {},         
        "performance_history": {}    
    }
# Mantenha esta checagem para pending_exercise_area separada da inicializa√ß√£o principal
if "pending_exercise_area" not in st.session_state:
    st.session_state.pending_exercise_area = None

# EXIBIR O PAINEL DE PROGESSO PRIMEIRO (na barra lateral)
display_progress_panel()

# Exibir mensagens anteriores do chat
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# L√≥gica do chat principal do dashboard
# A partir daqui, as mensagens s√£o processadas como um chat cont√≠nuo
# A primeira mensagem depender√° do current_stage
if st.session_state.user_data["current_stage"] == "ask_age" and not st.session_state.user_data["idade"]:
    send_message_to_clarear(f"Ol√°, {st.session_state.user_data['nome']}! Bem-vindo(a) ao seu dashboard. Qual √© a sua idade?", with_audio_button=True)
    # st.session_state.user_data["current_stage"] permanece "ask_age" at√© que a idade seja digitada

# Campo de entrada do usu√°rio
if prompt := st.chat_input("Digite sua mensagem..."):
    with st.chat_message("user"):
        st.markdown(prompt)
    st.session_state.messages.append({"role": "user", "content": prompt})

    # L√≥gica de processamento da entrada do usu√°rio
    if st.session_state.user_data["current_stage"] == "ask_age":
        try:
            age = int(prompt.strip())
            st.session_state.user_data["idade"] = age
            send_message_to_clarear("Excelente! Agora, para personalizar seus exerc√≠cios, quais √°reas cognitivas voc√™ sente mais dificuldade? (Ex: mem√≥ria, aten√ß√£o, racioc√≠nio, orienta√ß√£o)", with_audio_button=True)
            st.session_state.user_data["current_stage"] = "ask_difficulties"
        except ValueError:
            send_message_to_clarear("Por favor, digite uma idade v√°lida (apenas n√∫meros).", with_audio_button=True)

    elif st.session_state.user_data["current_stage"] == "ask_difficulties":
        difficulties_input = [d.strip().lower() for d in prompt.split(',') if d.strip()]
        st.session_state.user_data["dificuldades"] = difficulties_input
        st.session_state.user_info_collected = True # Define que a info inicial foi coletada
        
        if difficulties_input:
            first_difficulty = difficulties_input[0]
            st.session_state.pending_exercise_area = first_difficulty 
            
            # Ajuste de fluxo: se j√° disser 'sim' ou o tipo no input de dificuldades, avan√ßa
            if "sim" in prompt.lower() or any(area in prompt.lower() for area in ["mem√≥ria", "aten√ß√£o", "racioc√≠nio", "orienta√ß√£o"]):
                st.session_state.user_data["current_stage"] = "confirm_initial_exercise" 
                st.rerun() 
            else:
                send_message_to_clarear(f"√ìtimo! Entendi que voc√™ quer focar em **{', '.join(difficulties_input)}**.", with_audio_button=True)
                time.sleep(1)
                send_message_to_clarear(f"Que tal come√ßarmos com um exerc√≠cio de **{first_difficulty.capitalize()}**? Digite 'sim' para come√ßar!", with_audio_button=True)
                st.session_state.user_data["current_stage"] = "confirm_initial_exercise"
        else:
            send_message_to_clarear("Por favor, me diga pelo menos uma √°rea de dificuldade para eu poder ajudar.", with_audio_button=True)
            st.session_state.user_data["current_stage"] = "ask_difficulties" 

    elif st.session_state.user_data["current_stage"] == "confirm_initial_exercise":
        if "sim" in prompt.lower() and st.session_state.pending_exercise_area: 
            area_to_focus = st.session_state.pending_exercise_area 
            st.session_state.pending_exercise_area = None 
            
            with st.spinner(f"Gerando um exerc√≠cio de {area_to_focus.capitalize()}..."):
                exercise_details = generate_simulated_exercise(area_to_focus)
            
            if exercise_details:
                st.session_state.user_data["active_exercise"] = exercise_details["name"]
                st.session_state.user_data["exercise_data"] = exercise_details
                send_message_to_clarear(f"Certo! Vamos l√° para o exerc√≠cio de **{exercise_details['domain'].capitalize()}**: '{exercise_details['name']}'.", with_audio_button=True)
                time.sleep(0.5)
                send_message_to_clarear(exercise_details["instructions"], with_audio_button=True)
                
                if exercise_details["content"]:
                    send_message_to_clarear(exercise_details["content"], with_audio_button=True)
                
                send_message_to_clarear(f"Por favor, digite sua resposta no campo abaixo.", with_audio_button=True)

                st.session_state.user_data["current_stage"] = "in_exercise"
            else:
                send_message_to_clarear("Desculpe, n√£o consegui gerar um exerc√≠cio para essa √°rea no momento. Que tal tentarmos outra coisa?", with_audio_button=True)
                st.session_state.user_data["current_stage"] = "menu" 
        else:
            send_message_to_clarear("Ok. Se precisar de ajuda ou quiser tentar um exerc√≠cio, me diga.", with_audio_button=True)
            st.session_state.user_data["current_stage"] = "menu" 
            st.session_state.pending_exercise_area = None 
        
    elif st.session_state.user_data["current_stage"] == "in_exercise":
        exercise_name = st.session_state.user_data["active_exercise"]
        exercise_data = st.session_state.user_data["exercise_data"]
        user_response = prompt.strip() 
        
        expected_answer_raw = exercise_data.get("expected_answer", "").strip().lower()
        user_response_lower = user_response.lower()

        is_correct = False
        if expected_answer_raw: 
            if expected_answer_raw in user_response_lower:
                is_correct = True
            if expected_answer_raw.isdigit() and user_response_lower.isdigit():
                is_correct = (int(expected_answer_raw) == int(user_response_lower))
            if exercise_data["domain"] in ["mem√≥ria", "aten√ß√£o", "racioc√≠nio"] and ("sequ√™ncia" in exercise_name.lower() or "contagem" in exercise_name.lower() or "sequ√™ncia" in exercise_data["instructions"].lower() or "l√≥gica" in exercise_name.lower() or "s√©rie" in exercise_name.lower()): 
                expected_seq = [s.strip().lower() for s in expected_answer_raw.replace(',', ' ').replace('.', ' ').split() if s.strip()]
                user_seq = [s.strip().lower() for s in user_response_lower.replace(',', ' ').replace('.', ' ').split() if s.strip()]
                
                is_correct = (expected_seq == user_seq)


        domain = exercise_data.get("domain", "desconhecido")
        
        with st.spinner("Analisando sua resposta e gerando feedback..."):
            feedback = generate_simulated_feedback( # ALTERADO: Chamar fun√ß√£o simulada
                "correct" if is_correct else "incorrect",
                exercise_name,
                user_response,
                exercise_data.get("expected_answer", "n√£o dispon√≠vel")
            )

        send_message_to_clarear(feedback, with_audio_button=True)
        update_performance_history(exercise_name, domain, "correct" if is_correct else "incorrect")
        
        send_message_to_clarear("O que voc√™ gostaria de fazer a seguir? Podemos tentar outro exerc√≠cio ou finalizar a sess√£o.", with_audio_button=True)
        st.session_state.user_data["current_stage"] = "menu"
        st.session_state.user_data["active_exercise"] = None 

    elif st.session_state.user_data["current_stage"] == "menu":
        user_input_lower = prompt.lower()
        
        if "exerc√≠cio" in user_input_lower or "treinar" in user_input_lower or "quero mais" in user_input_lower:
            send_message_to_clarear("Que tipo de exerc√≠cio voc√™ gostaria de fazer? (Ex: mem√≥ria, aten√ß√£o, racioc√≠nio, orienta√ß√£o)", with_audio_button=True)
            st.session_state.user_data["current_stage"] = "ask_specific_exercise_type" 
            
        elif "progresso" in user_input_lower or "como estou" in user_input_lower or "desempenho" in user_input_lower:
            send_message_to_clarear("Seu progresso detalhado est√° sempre vis√≠vel na barra lateral √† esquerda! Continue praticando para ver mais melhorias!", with_audio_button=True)
            st.session_state.user_data["current_stage"] = "menu" 

        elif "finalizar" in user_input_lower or "sair" in user_input_lower or "encerrar" in user_input_lower:
            st.session_state.user_data["current_stage"] = "end_session"
            st.rerun() 
            
        elif any(area in user_input_lower for area in ["mem√≥ria", "aten√ß√£o", "racioc√≠nio", "orienta√ß√£o"]):
            area_to_focus = next((area for area in ["mem√≥ria", "aten√ß√£o", "racioc√≠nio", "orienta√ß√£o"] if area in user_input_lower), None)
            if area_to_focus:
                with st.spinner(f"Gerando um exerc√≠cio de {area_to_focus.capitalize()}..."):
                    exercise_details = generate_simulated_exercise(area_to_focus) # ALTERADO: Chamar fun√ß√£o simulada
                if exercise_details:
                    st.session_state.user_data["active_exercise"] = exercise_details["name"]
                    st.session_state.user_data["exercise_data"] = exercise_details
                    send_message_to_clarear(f"Certo! Vamos l√° para o exerc√≠cio de **{exercise_details['domain'].capitalize()}**: '{exercise_details['name']}'.", with_audio_button=True)
                    time.sleep(0.5)
                    send_message_to_clarear(exercise_details["instructions"], with_audio_button=True)
                    if exercise_details["content"]:
                        send_message_to_clarear(exercise_details["content"], with_audio_button=True)

                    send_message_to_clarear(f"Por favor, digite sua resposta no campo abaixo.", with_audio_button=True)

                    st.session_state.user_data["current_stage"] = "in_exercise"
                else:
                    send_message_to_clarear("Desculpe, n√£o consegui gerar um exerc√≠cio para essa √°rea no momento. Que tal tentarmos outra coisa?", with_audio_button=True)
                    st.session_state.user_data["current_stage"] = "menu" 
            else: 
                send_message_to_clarear("Desculpe, n√£o entendi o tipo de exerc√≠cio. Posso te ajudar com exerc√≠cios de mem√≥ria, aten√ß√£o, racioc√≠nio ou orienta√ß√£o.", with_audio_button=True)
                st.session_state.user_data["current_stage"] = "menu"

        else:
            send_message_to_clarear("Desculpe, n√£o entendi. Posso te ajudar com **exerc√≠cios** (diga 'exerc√≠cio' ou o tipo como 'mem√≥ria') ou verificar seu **progresso**.", with_audio_button=True)
            st.session_state.user_data["current_stage"] = "menu"
        
    elif st.session_state.user_data["current_stage"] == "ask_specific_exercise_type":
        user_input_lower = prompt.lower()
        if any(area in user_input_lower for area in ["mem√≥ria", "aten√ß√£o", "racioc√≠nio", "orienta√ß√£o"]):
            area_to_focus = next((area for area in ["mem√≥ria", "aten√ß√£o", "racioc√≠nio", "orienta√ß√£o"] if area in user_input_lower), None)
            if area_to_focus:
                with st.spinner(f"Gerando um exerc√≠cio de {area_to_focus.capitalize()}..."):
                    exercise_details = generate_simulated_exercise(area_to_focus) # ALTERADO: Chamar fun√ß√£o simulada
                if exercise_details:
                    st.session_state.user_data["active_exercise"] = exercise_details["name"]
                    st.session_state.user_data["exercise_data"] = exercise_details
                    send_message_to_clarear(f"Certo! Vamos l√° para o exerc√≠cio de **{exercise_details['domain'].capitalize()}**: '{exercise_details['name']}'.", with_audio_button=True)
                    time.sleep(0.5)
                    send_message_to_clarear(exercise_details["instructions"], with_audio_button=True)
                    if exercise_details["content"]:
                        send_message_to_clarear(exercise_details["content"], with_audio_button=True)

                    send_message_to_clarear(f"Por favor, digite sua resposta no campo abaixo.", with_audio_button=True)

                    st.session_state.user_data["current_stage"] = "in_exercise"
                else:
                    send_message_to_clarear("Desculpe, n√£o consegui gerar um exerc√≠cio para essa √°rea no momento. Que tal tentarmos outra coisa?", with_audio_button=True)
                    st.session_state.user_data["current_stage"] = "menu" 
            else:
                send_message_to_clarear("Desculpe, n√£o entendi o tipo de exerc√≠cio. Por favor, diga 'mem√≥ria', 'aten√ß√£o', 'racioc√≠nio' ou 'orienta√ß√£o'.", with_audio_button=True)
                st.session_state.user_data["current_stage"] = "ask_specific_exercise_type" 
        else:
            send_message_to_clarear("Desculpe, n√£o entendi o tipo de exerc√≠cio. Por favor, diga 'mem√≥ria', 'aten√ß√£o', 'racioc√≠nio' ou 'orienta√ß√£o'.", with_audio_button=True)
            st.session_state.user_data["current_stage"] = "ask_specific_exercise_type"

# --- Est√°gio de Finaliza√ß√£o de Sess√£o ---
elif st.session_state.user_data["current_stage"] == "end_session":
    st.markdown("---")
    st.header(f"üëã Sess√£o Finalizada, {st.session_state.user_data['nome']}!")
    send_message_to_clarear(f"Obrigado por utilizar o ClareAR hoje, {st.session_state.user_data['nome']}!", with_audio_button=True)
    
    total_attempts = 0
    total_correct = 0
    
    if st.session_state.user_data["performance_history"]:
        for domain, data in st.session_state.user_data["performance_history"].items():
            total_attempts += data["attempts"]
            total_correct += data["correct"]
    
    overall_accuracy = (total_correct / total_attempts) * 100 if total_attempts > 0 else 0

    st.subheader("üìä Seu Resumo de Performance")
    st.write(f"Voc√™ completou um total de **{total_attempts} exerc√≠cios**.")
    st.write(f"Sua taxa geral de acerto foi de **{overall_accuracy:.1f}%**.")

    if st.session_state.user_data["performance_history"]:
        df_progress = pd.DataFrame([
            {"Dom√≠nio": d.capitalize(), "Acerto (%)": (data["correct"] / data["attempts"]) * 100, "Tentativas": data["attempts"]}
            for d, data in st.session_state.user_data["performance_history"].items() if data["attempts"] > 0
        ])
        st.dataframe(df_progress.set_index("Dom√≠nio"))

    st.subheader("‚ú® Pr√≥ximos Passos e Orienta√ß√µes")
    if overall_accuracy >= 80:
        send_message_to_clarear("Excelente desempenho! Sua concentra√ß√£o e mem√≥ria est√£o √≥timas. Continue com a pr√°tica regular para manter seus resultados e desafiar-se com novos exerc√≠cios!", with_audio_button=True)
    elif overall_accuracy >= 50:
        send_message_to_clarear("Voc√™ est√° no caminho certo! Continue praticando regularmente para fortalecer suas habilidades. Pequenos avan√ßos di√°rios fazem uma grande diferen√ßa. Lembre-se de focar nas √°reas que voc√™ sente mais dificuldade.", with_audio_button=True)
    else:
        send_message_to_clarear("Tudo bem! O importante √© a sua dedica√ß√£o e o esfor√ßo. A reabilita√ß√£o cognitiva √© um processo. Sugiro focar mais nos exerc√≠cios das √°reas que voc√™ teve menor acerto e tentar sess√µes mais curtas, mas frequentes. N√£o hesite em procurar seu m√©dico ou neuropsic√≥logo para mais orienta√ß√µes.", with_audio_button=True)

    st.info("Para iniciar uma nova sess√£o, por favor, recarregue a p√°gina no seu navegador.")

    # Limpar o estado para uma nova sess√£o ao recarregar a p√°gina
    # st.session_state.clear()